<!DOCTYPE doctype PUBLIC "-//w3c//dtd html 4.0 transitional//en">
<!-- saved from url=(0085)http://www-cs.engr.ccny.cuny.edu/~zhu/CSc212/Assignments/CSC212-2017-assignment4.html -->
<html><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
    
    <meta name="GENERATOR" content="Mozilla/4.79 [en] (Windows NT 5.0;
      U) [Netscape]">
    <title>Assignment 4 - sequence Class with a Linked List (Chapter 5)</title>
  </head>
  <body>
    <b><font size="+3">Computer Science </font><font face="Helvetica,
        Arial, sans-serif">City College of New York</font></b> <br>
    <font size="+1">&nbsp; CSc212</font>00 <font size="+1">Data
      Structures</font>&nbsp; Fall 2017
    <hr noshade="noshade">
    <h2> Programming Assignment 4&nbsp; (Chapter 5) - Revised sequence
      class with the Linked List Toolkit</h2>
    <h3> Adapted from Data Structures and Other Objects Using C++&nbsp;<br>
      <b>by <a href="http://www.cs.colorado.edu/~main/">Michael Main
        </a>and <a href="http://cseweb.ucsd.edu/users/savitch/">Walter
          Savitch</a></b></h3>
    <hr>
    <dl>
      <dt> <b>The Assignment:</b></dt>
      <dd> You will implement and test a revised sequence class that
        uses a linked list to store the items.</dd>
      <dt> <b>Purposes:</b></dt>
      <dd> Ensure that you can write a small class that uses the linked
        list toolkit to create and manipulate a linked list.</dd>
      <dt> <b>Before Starting:</b></dt>
      <dd> Read all of Chapter 5, with particular attention to Sections
        5.3 and 5.4.</dd>
      <dt> <b>Due Date:</b></dt>
      <blockquote> <dt><span style="font-weight: bold;">Wednesday,
            October&nbsp; 25, 2017</span>. If you have problems, late
          work will be accepted on Thursday with no penalties. Late work
          may be submitted on Friday or Saturday with 5% penalty per
          day. No work will be accepted after Saturday.</dt>
      </blockquote>
      <dt> <b>How to Turn In:</b></dt>
      <blockquote> <dt> Files to be submitted: source code (*.cpp,
          *.cxx, *.h, see below for details)&nbsp; and the text file (a
          *.txt file or *.pdf file) showing the running output results
          using seq_ex3.cxx. Please don't send your excutable files.
          Please submit your files to <a href="mailto:ds.zhu.ccny@gmail.com">ds.zhu.ccny@gmail.com</a>,
          with the subject line "<b>CSc212 Assignment 4</b>".</dt>
      </blockquote>
      <dt> <b>Files that you must write and turn in:</b></dt>
      <ol>
        <li> <tt>sequence3.h:</tt> The header file for the new sequence
          class. Actually, you don't have to write much of this file.
          Just start with <a href="http://www-cs.engr.ccny.cuny.edu/~zhu/CSc212/Assignments/sequence3.h">our version </a>and
          add your name and other information at the top. If some of
          your member functions are implemented as inline functions,
          then you may put those implementations in this file too. By
          the way, you might want to compare this header file with your
          first sequence header file <a href="http://www-cs.engr.ccny.cuny.edu/~zhu/CSc212/Assignments/sequence1.h">(sequence1.h)




          </a>, and second sequence header file <a href="http://www-cs.engr.ccny.cuny.edu/~zhu/CSc212/Assignments/sequence2.h">(sequence2.h)</a>.
          The linked list version no longer has a CAPACITY constant nor
          a DEFAULT_CAPACITY constant because the items are stored on a
          linked list instead of an array.</li>
        <li> <tt>sequence3.cxx:</tt> The implementation file for the
          new sequence class. You will write all of this file, which
          will have the invariant of the sequence class, the
          implementations of all the member functions of the sequence
          class, and the Big-Os of these functions.</li>
        <li> <tt><a href="http://www-cs.engr.ccny.cuny.edu/~zhu/CSc212/Assignments/node1.h">node1.h</a></tt> and <tt><a href="http://www-cs.engr.ccny.cuny.edu/~zhu/CSc212/Assignments/node1.cxx">node1.cxx:</a></tt> Copy these files to
          your sub-directory. They contain the linked list toolkit from
          Section 5.2. You may use these files without changing them.
          However we only provide the documentation for the function
          list_piece (see Self-Test Exercise 17 on page 239). You may
          need to write an implementation of this function if you are
          going to use it in writing your copy constructor and
          overloading your assignment operator. If you do make changes,
          please turn them in.</li>
      </ol>
      <dt> <b>Other files that you may find helpful:</b></dt>
      <ol>
        <li> <tt><a href="http://www-cs.engr.ccny.cuny.edu/~zhu/CSc212/Assignments/sequence_test.cxx">sequence_test.cxx</a></tt>:
          This is the same interactive test program that you used with
          the earlier sequences. This is exactly what we expect for
          the&nbsp; information hiding of the class - the users do not
          need to know how the class is implemented ( both the member
          variables and the functions) as far as the interfaces (the
          prototype of the member functions)&nbsp; remain the same. So
          if you want to use the test program with the new sequence, the
          only thing you need to do is to copy it to your directory and
          open it with your editor. Then change the statements</li>
        <br>
        <tt>#include "sequence1.h"</tt> <br>
        <tt>using namespace main_savitch_3;</tt> <br>
        to <br>
        <tt>#include "sequence3.h"</tt> <br>
        <tt>using namespace main_savitch_5;<br>
          <br>
        </tt>
        <li> <tt><a href="http://www-cs.engr.ccny.cuny.edu/~zhu/CSc212/Assignments/seq_ex3.cxx">seq_ex3.cxx:</a></tt> A
          non-interactive test program that will be used to grade the
          correctness of your new sequence class. The points given by
          the program will only be served as a reference; we are going
          to look into your code and your analysis ( in the form of
          comment lines) for actual grading.</li>
      </ol>
    </dl>
    <hr>
    <h3>The sequence Class Using a Linked List<br>
      Discussion of the Assignment</h3>
    Your sequence class for this assignment will differ from the your
    previous sequence in the following ways:
    <ul>
      <li> The sequence's items are now stored on a linked list. The
        head pointer of the linked list is a private member variable of
        the sequence class. I suggest that you also have a tail pointer
        as an additional private member variable of the sequence class.
        The reason for the tail pointer is explained in Section 5.4 of
        the textbook.</li>
      <li> Because you are dynamically allocation memory within your
        sequence class, you will need to define a copy constructor, an
        assignment operator, and a destructor. You need to pay special
        attention to the value semantics of your new sequence class -
        you need not only to make a copy of the linked list, but also
        need to place the node pointers correctly. Please refer to page
        260 for more detailed discussions on the value semantics.</li>
    </ul>
    Start by declaring the new sequence's private member variables in
    sequence3.h. You might try declaring these variables yourself, and
    then compare your solution with the suggestion in Section 5.4.
    <p>Once again, do your work in small pieces. For example, my first
      version of the sequence had only a constructor, start, insert,
      advance, and current. My other member functions started out as
      stubs. </p>
    <p>Design a sequence class using a linked list could be little bit
      more complicated than using an array. Therefore, I recommend you
      to draw an example linked list such as the one shown in page 260
      of the textbook when you are writing code for each member
      function. Always remember to show all the member variables in
      order to remind you&nbsp; making proper changes of them. You need
      to place the cursor and the precursor at various locations, head,
      tail and other places. Note that the sequence could be empty, and
      cursor and/or precursor could be NULL, even when the sequence is
      NOT empty. With the help of small drawings, jobs will be much
      easier! </p>
    <p>Use the interactive test program and the debugger to track down
      errors in your implementation. If you have an error, <i>do not
        start making changes until you have identified the cause of the
        error.</i> If you come to me&nbsp; for help, we will always ask
      you to do the following: </p>
    <ol>
      <li> Show us the invariant that describes how your private member
        variables implement the sequence class.</li>
      <li> Use the debugger to show us the problem!</li>
    </ol>
    <b>For those working in the Unix operating system:</b> Spend some
    time writing your make file. A correct Unix makefile will save you
    time. Make sure that each compilation command in the make file has a
    TAB as the first character. In order to insert a TAB using emacs,
    type Ctrl-Q and then press the TAB key. Or, if you are working from
    a modem where the TAB key is disabled, you can type <br>
    ESCAPE x quoted-insert RETURN TAB
    <p><b>Run Time Analysis of the sequence classes and grading rules</b>
    </p>
    <p>We will use the number of items in a bag as the input size n of
      the project.&nbsp; Please give the Big-O of each function in your
      implementation, and compare them with the corresponding functions
      of the sequence using a dynamic array. <font color="#ff0000">You
        should write the time analysis in the comment lines of each
        function.&nbsp;</font> The breakdowns of points (of 100) will be
      the followings:</p>
    <p>Basis points (70) if your implementation passes the seq_ex3 exam<br>
      Invariant of the class (5 points) <br>
      Run time analysis (10 points) <br>
      Other implementation details (15 points) &nbsp; </p>
    <p> </p>
    <hr> <a href="http://www-cs.engr.ccny.cuny.edu/~zhu/">Zhigang Zhu</a>
    ( <a href="mailto:ds.zhu.ccny@gmail.com">ds.zhu.ccny@gmail.com</a>
    ), 2017
    <address> </address>
    <hr>
  

</body></html>
<!DOCTYPE doctype PUBLIC "-//w3c//dtd html 4.0 transitional//en">
<!-- saved from url=(0085)http://www-cs.engr.ccny.cuny.edu/~zhu/CSc212/Assignments/CSC212-2017-assignment6.html -->
<html><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
    
    <meta name="GENERATOR" content="Mozilla/4.79 [en] (Windows NT 5.0;
      U) [Netscape]">
    <title>Data Structures - Bag Implemgnmented with a BST- Assignment 6</title>
  </head>
  <body>
    <b><font size="+3">Computer Science </font><font face="Helvetica,
        Arial, sans-serif">City College of New York</font></b> <br>
    <font size="+1">&nbsp; CSc212</font>00 <font size="+1">Data
      Structures</font>&nbsp; &nbsp;Fall 2017
    <hr noshade="noshade">
    <h2> Data Structures - Chapter 10 - Programming Assignment 6<br>
      The Bag Class with a Binary Search Tree</h2>
    <h3> @ Data Structures and Other Objects Using C++&nbsp;<br>
    </h3>
    <h3><b><b><b><b>by <a href="http://www.cs.colorado.edu/~main/">Michael




                Main </a>and <a href="http://cseweb.ucsd.edu/users/savitch/">Walter
                Savitch</a></b></b></b></b></h3>
    <h3></h3>
    <hr> <dt> <b>The Assignment:</b></dt>
    <dd> Implement the bag template class from Section 10.5, using a
      binary search tree to store the items.</dd>
    <dt> <b>Purposes:</b></dt>
    <dd> Ensure that you understand and can use binary search tree.</dd>
    <dt> <b>Before Starting:</b></dt>
    <dd> Read all of Chapter 10, especially Sections 10.3 and 10.5.</dd>
    <dt> <b>Due Dates:</b></dt>
    <blockquote> <dt>Wednesday, November 29, 2017. If you run into
        hardware or software problems, you may submit on Thursday with
        no penalty. You may submit on Friday or Saturday with a small
        penalty. No submissions will be accepted after Saturday.</dt>
    </blockquote>
    <dt> <b>How to Turn In:</b></dt>
    <blockquote> <dt> Files to be submitted: source code (*.cpp, *.cxx,
        *.h, see below for details)&nbsp; and the text file (a *.txt
        file or *.pdf file) showing the running output results using <tt><a href="http://www-cs.engr.ccny.cuny.edu/~zhu/CSc212/Assignments/bagexam.cxx">bagexam.cxx</a></tt>. Please don't send
        your excutable files. Please submit your files to <a href="mailto:ds.zhu.ccny@gmail.com">ds.zhu.ccny@gmail.com</a>,
        with the subject line "<b>CSc212 Assignment 6</b>".</dt>
    </blockquote>
    <dt> <b>Files that you must write and turn in :</b></dt>
    <ol>
      <li> <tt>bag6.h:</tt> Header file for this version of the bag
        class. You don't have to write much of this file. Just copy our
        version from <a href="http://www-cs.engr.ccny.cuny.edu/~zhu/CSc212/Assignments/bag6.h">bag6.h</a> and add your name and
        other information at the top.</li>
      <li> <tt>bag6.template:</tt> The implementation file for the new
        bag class. I have written much of this to get you started. You
        can download my starting file from <a href="http://www-cs.engr.ccny.cuny.edu/~zhu/CSc212/Assignments/bag6.template">bag6.template</a></li>
      <br>
      NOTE: Some of you have been forgetting to put your name and a
      clearly written invariant at the top of this file. I will take off
      points for such omissions. In any case, there are four functions
      in this implementation file that you must implement. These files
      are marked with the words <tt>STUDENT WORK</tt>
    </ol>
    <dt> <b>Other files that you may find helpful:</b></dt>
    <ol>
      <li> <tt>bintree.h:</tt> and <tt>bintree.template</tt> This is
        the binary tree node template class from Section 10.3. You can
        download them from <a href="http://www-cs.engr.ccny.cuny.edu/~zhu/CSc212/Assignments/bintree.h">bintree.h</a> and <a href="http://www-cs.engr.ccny.cuny.edu/~zhu/CSc212/Assignments/bintree.template">bintree.template</a></li>
      <p><br>
        <b>NOTE:</b>This version of the binary tree node has a small
        change from the original version that appears in the first
        printing of the second edition of the textbook ( and has a major
        change from the version in the first edition of the book!). In
        particular, the authors have changed the return values from the
        non-const versions of the <tt>left()</tt> and <tt>right()</tt>
        functions so that they return a reference to the pointer in the
        node. This is indicated by the &amp; symbol here: </p>
      <pre>&nbsp; binary_tree_node*&amp; left( )</pre>
      The use of a "reference" (indicated by the ampersand) in the
      return value has two advantages that simplify the material of
      Chapter 10:
      <ul>
        <li> It now allows a direct assignment such as: p-&gt;left() =
          NULL. This is not a huge advantage since the same thing can be
          accomplished by using the set_left function.</li>
        <li> The expression <tt>p-&gt;left()</tt> can be passed as the
          argument to a function such as: <tt>tree_clear(p-&gt;left());</tt>
          The parameter of <tt>tree_clear</tt> is a reference
          parameter, so that any changes that <tt>tree_clear</tt> makes
          to <tt>p-&gt;left()</tt> will now affect the actual left
          pointer in the node <tt>*p</tt>. In this example, the <tt>tree_clear</tt>
          function does set its parameter to NULL, so that the total
          effect of <tt>tree_clear(p-&gt;left())</tt> is to clear the
          left subtree of p and to set p's left pointer to NULL.</li>
      </ul>
      In the case of <tt>tree_clear</tt>, this is not a huge advantage
      because we could have just set p's left pointer to NULL ourselves.
      <b>But, in this assignment, there are two functions, <tt>bst_remove</tt>
        and <tt>bst_remove_max</tt>, which are easier to write if we
        can use <tt>p-&gt;left()</tt> and <tt>p-&gt;right()</tt> as
        the parameters of recursive calls.</b> See my implementations in
      bag6.template for details.
      <li> <tt><a href="http://www-cs.engr.ccny.cuny.edu/~zhu/CSc212/Assignments/bagtest.cxx">bagtest.cxx:</a></tt> A simple
        interactive test program.</li>
      <li> <tt><a href="http://www-cs.engr.ccny.cuny.edu/~zhu/CSc212/Assignments/bagexam.cxx">bagexam.cxx:</a></tt> A
        non-interactive test program that will be used to grade the
        correctness of your bag class.</li>
    </ol>
    <hr>
    <h3> The Bag Class Using a Binary Search Tree<br>
      Discussion of the Assignment</h3>
    Start by understanding the entire pseudocode for the binary search
    tree operations (from Section 10.5). Then read through the portions
    that I have already implemented for you. Implement the rest of your
    work in two parts: (1) The insert and count functions, and (2) The
    bst_remove_all and bst_remove_max functions. Don't move to step 2
    until you have completely finished and tested step 1.<font color="#ff0000"> Please only submit your work until everything is
      done...no need to submit the first part since I will not give
      bonus points for doing that this year.</font><br>
    <p>Since this is a template class, debugging can be more difficult
      (some debuggers don't permit breakpoints in a template function.
      To help in debugging, you can call b.debug() in a program to print
      the binary search tree for the bag b (using the format shown on
      page 484). </p>
    <p>If you use a makefile, you must also be careful in specifying
      what files are to be compiled. For example: </p>
    <pre>bagexam: bagexam.o<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; g++ -Wall -gstabs bagexam.o -o bagexam<br><br>bagexam.o: bagexam.cxx bag6.h bag6.template bintree.h bintree.template<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; g++ -c -Wall -gstabs bagexam.cxx</pre>
    The bag and bintree templates are never compiled on their own, but
    in order to create bagexam.o, all the template files must be present
    in the current directory.
    <p>Most of your grade will be based on the correctness of your
      implementation. However, I will also look at your work and assign
      some points for clarity and programming style. Make sure that your
      name is on all your work. </p>
    <p> </p>
    <hr> <br>
    <a href="http://www-cs.engr.ccny.cuny.edu/~zhu/">Zhigang Zhu</a> (
    <a href="mailto:ds.zhu.ccny@gmail.com">ds.zhu.ccny@gmail.com</a> ),
    2017
    <address> </address>
    <hr> <br>
    <br>
    <br>
    <br>
    <br>
  

</body></html>